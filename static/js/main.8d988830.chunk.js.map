{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","moviename","name","orginal_name","console","log","movieTrailer","then","url","urlParamV","URLSearchParams","URL","search","catch","err","key","id","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMovie","Math","floor","random","length","fetchMovie","style","backgroundSize","backgroundImage","backgroundPosition","overview","Nav","navbarBlack","setNavbarBlack","window","addEventListener","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8d988830.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL:\"https://api.themoviedb.org/3\"\n})\n\nexport default instance","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport ScrollContainer from \"react-indiana-drag-scroll\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const youtubeOpts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n  const movieClicked = (moviename) => {\n    console.log(moviename);\n    if (trailerUrl != \"\") setTrailerUrl(\"\");\n    else {\n      movieTrailer(moviename)\n        .then((url) => {\n          const urlParamV = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParamV.get(\"v\"));\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <ScrollContainer className=\"row__posters\">\n        {/* <div className=\"row__posters\"> */}\n        {movies.map((movie) => (\n          <img\n            onClick={() =>\n              movieClicked(movie.name || movie.title || movie.orginal_name)\n            }\n            key={movie.id}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} //use && if theres no else or : otherwise use ?\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n        {/* </div> */}\n      </ScrollContainer>\n      {trailerUrl != \"\" && <YouTube videoId={trailerUrl} opts={youtubeOpts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"04ae7689fc21853d7db93ebc5e887fa0\";\n\nconst requests = {\n  fetchTrending: `trending/all/day?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n// https://api.themoviedb.org/3/movie/550?api_key=04ae7689fc21853d7db93ebc5e887fa0\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState({});\n  useEffect(() => {\n    async function fetchMovie() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length)\n        ]\n      ); // using prettier\n    }\n    fetchMovie();\n  }, []);\n  console.log(movie);\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url('${base_url}${movie?.backdrop_path}')`, //optional chaining: no need to check if movie is undefined '?' saw this neat trick on stackoverflow\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {/* i notice that some movies give u a title a name or an orginal name , api information isnt consistent   */}\n          {movie?.name || movie?.title || movie?.orginal_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">More Info</button>\n        </div>\n        <p className=\"banner__description\">{movie?.overview}</p>\n      </div>\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\nfunction Nav() {\n  const [navbarBlack, setNavbarBlack] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      setNavbarBlack(true);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  return (\n    <nav className={`${navbarBlack && \"nav__black\"}`}>\n      <div className=\"nav__contents\">\n        <img\n          className=\"nav__logo\"\n          src=\"https://pngimg.com/uploads/netflix/netflix_PNG32.png\"\n        />\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row\n        isLargeRow\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n      />\n      <Row title=\"Trending now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}